/**
 * EXPLOIT DETECTION TEST SUITE - PART 4
 * 
 * Final part covering:
 * - Net worth calculation exploits
 * - Leaderboard manipulation
 * - IPO and market cap exploits
 * - Edge cases and boundary conditions
 */

import { describe, test, expect } from "vitest";
import { convexTest } from "convex-test";
import { api } from "../_generated/api";
import schema from "../schema";

// ============================================================================
// SECTION 11: NET WORTH & PORTFOLIO EXPLOITS
// ============================================================================

describe("Net Worth & Portfolio Exploits", () => {
  
  test("EXPLOIT: Net worth calculation inconsistency", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-networth",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 10000000, // $100k
        netWorth: 10000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const companyId = await t.run(async (ctx) => {
      return await ctx.db.insert("companies", {
        ownerId: playerId,
        name: "Asset Co",
        ticker: "ASET",
        balance: 50000000, // $500k in company
        isPublic: true,
        marketCap: 100000000,
        sharesOutstanding: 10000,
        reputationScore: 0.5,
        flaggedStatus: false,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const stockId = await t.run(async (ctx) => {
      return await ctx.db.insert("stocks", {
        companyId,
        ticker: "ASET",
        price: 10000, // $100/share
        totalShares: 10000,
        marketCap: 100000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Buy stocks
    await t.mutation(api.stocks.buyStock, {
      userId: playerId,
      stockId,
      shares: 100,
      accountType: "player",
      accountId: playerId,
    });
    
    const cryptoId = await t.run(async (ctx) => {
      return await ctx.db.insert("cryptocurrencies", {
        name: "AssetCoin",
        symbol: "ASETC",
        currentPrice: 100000,
        marketCap: 10000000000,
        liquidity: 100000,
        totalSupply: 100000,
        circulatingSupply: 100000,
        baseVolatility: 0.1,
        trendDrift: 0,
        lastVolatilityUpdate: Date.now(),
        lastPriceChange: 0,
        createdAt: Date.now(),
        lastUpdated: Date.now(),
      });
    });
    
    // Buy crypto
    await t.mutation(api.crypto.buyCrypto, {
      cryptoId,
      amount: 100,
    });
    
    // Calculate expected net worth
    const player = await t.run(async (ctx) => {
      return await ctx.db.get(playerId);
    });
    
    const stockHoldings = await t.query(api.portfolio.getUserStockHoldings, {
      userId: playerId,
    });
    
    const cryptoHoldings = await t.query(api.portfolio.getUserCryptoHoldings, {
      userId: playerId,
    });
    
    let calculatedNetWorth = player?.balance || 0;
    
    // Add stock value
    for (const holding of stockHoldings) {
      if (holding.stock) {
        calculatedNetWorth += holding.stock.price * holding.shares;
      }
    }
    
    // Add crypto value
    for (const holding of cryptoHoldings) {
      if (holding.crypto) {
        calculatedNetWorth += holding.crypto.currentPrice * holding.balance;
      }
    }
    
    // Compare with stored net worth
    if (player && Math.abs(player.netWorth - calculatedNetWorth) > calculatedNetWorth * 0.1) {
      console.warn(`⚠️  WARNING: Net worth mismatch. Stored: ${player.netWorth}, Calculated: ${calculatedNetWorth}`);
    }
  });
  
  test("EXPLOIT: Portfolio value manipulation through holdings", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-portfolio-manip",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 100000000,
        netWorth: 100000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const companyId = await t.run(async (ctx) => {
      return await ctx.db.insert("companies", {
        ownerId: playerId,
        name: "Manipulated Co",
        ticker: "MNIP",
        balance: 50000000,
        isPublic: true,
        marketCap: 100000000,
        sharesOutstanding: 10000,
        reputationScore: 0.5,
        flaggedStatus: false,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const stockId = await t.run(async (ctx) => {
      return await ctx.db.insert("stocks", {
        companyId,
        ticker: "MNIP",
        price: 10000,
        totalShares: 10000,
        marketCap: 100000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Manually insert holdings without payment
    await t.run(async (ctx) => {
      await ctx.db.insert("userStockHoldings", {
        userId: playerId,
        companyId,
        stockId,
        shares: 1000, // Large holding
        averagePurchasePrice: 100, // Very low price
        boughtAt: Date.now(),
      });
    });
    
    // Check if this inflated net worth
    const holdings = await t.query(api.portfolio.getUserStockHoldings, {
      userId: playerId,
    });
    
    const totalHeld = holdings.reduce((sum, h) => sum + h.shares, 0);
    
    if (totalHeld > 0) {
      const player = await t.run(async (ctx) => {
        return await ctx.db.get(playerId);
      });
      
      console.warn(`⚠️  EXPLOIT DETECTED: Holdings created without purchase. Balance: ${player?.balance}, Holdings: ${totalHeld} shares`);
    }
  });
  
  test("EXPLOIT: Negative holdings", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-negative-holdings",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 10000000,
        netWorth: 10000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const companyId = await t.run(async (ctx) => {
      return await ctx.db.insert("companies", {
        ownerId: playerId,
        name: "Negative Co",
        ticker: "NEG",
        balance: 50000000,
        isPublic: true,
        marketCap: 100000000,
        sharesOutstanding: 10000,
        reputationScore: 0.5,
        flaggedStatus: false,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const stockId = await t.run(async (ctx) => {
      return await ctx.db.insert("stocks", {
        companyId,
        ticker: "NEG",
        price: 10000,
        totalShares: 10000,
        marketCap: 100000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Try to insert negative holdings
    try {
      await t.run(async (ctx) => {
        await ctx.db.insert("userStockHoldings", {
          userId: playerId,
          companyId,
          stockId,
          shares: -100, // Negative shares
          averagePurchasePrice: 10000,
          boughtAt: Date.now(),
        });
      });
      
      const holdings = await t.query(api.portfolio.getUserStockHoldings, {
        userId: playerId,
      });
      
      const negativeHoldings = holdings.filter(h => h.shares < 0);
      if (negativeHoldings.length > 0) {
        console.error("⚠️  EXPLOIT DETECTED: Negative holdings exist");
        expect.fail("Negative holdings accepted");
      }
    } catch (error) {
      // Expected to fail
    }
  });
});

// ============================================================================
// SECTION 12: LEADERBOARD MANIPULATION
// ============================================================================

describe("Leaderboard Manipulation", () => {
  
  test("EXPLOIT: Leaderboard ranking manipulation", async () => {
    const t = convexTest(schema);
    
    // Create multiple players
    const players = [];
    for (let i = 0; i < 5; i++) {
      const playerId = await t.run(async (ctx) => {
        const userId = await ctx.db.insert("users", {
          tokenIdentifier: `test-leaderboard-${i}`,
        });
        
        return await ctx.db.insert("players", {
          userId,
          balance: 10000000 + (i * 5000000), // Incrementing balances
          netWorth: 10000000 + (i * 5000000),
          createdAt: Date.now(),
          updatedAt: Date.now(),
        });
      });
      players.push(playerId);
    }
    
    // Check leaderboard ordering
    const allPlayers = await t.run(async (ctx) => {
      return await ctx.db.query("players").collect();
    });
    
    const sortedByNetWorth = [...allPlayers].sort((a, b) => b.netWorth - a.netWorth);
    
    // Verify ordering is correct
    for (let i = 0; i < sortedByNetWorth.length - 1; i++) {
      if (sortedByNetWorth[i].netWorth < sortedByNetWorth[i + 1].netWorth) {
        console.error("⚠️  EXPLOIT DETECTED: Leaderboard ordering incorrect");
        expect.fail("Leaderboard sorting broken");
      }
    }
  });
  
  test("EXPLOIT: Fake net worth inflation", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-fake-networth",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 10000000,
        netWorth: 999999999999, // Inflated net worth
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Verify net worth matches actual assets
    const player = await t.run(async (ctx) => {
      return await ctx.db.get(playerId);
    });
    
    if (player && player.netWorth > player.balance * 10) {
      console.warn(`⚠️  WARNING: Net worth significantly exceeds balance without assets. Balance: ${player.balance}, Net Worth: ${player.netWorth}`);
    }
  });
});

// ============================================================================
// SECTION 13: IPO & MARKET CAP EXPLOITS
// ============================================================================

describe("IPO & Market Cap Exploits", () => {
  
  test("EXPLOIT: Market cap manipulation", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-marketcap",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 100000000,
        netWorth: 100000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const companyId = await t.run(async (ctx) => {
      return await ctx.db.insert("companies", {
        ownerId: playerId,
        name: "MarketCap Co",
        ticker: "MCAP",
        balance: 10000000, // $100k
        isPublic: false,
        reputationScore: 0.5,
        flaggedStatus: false,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // IPO with 1 share at very high price
    try {
      await t.mutation(api.companies.makeCompanyPublic, {
        companyId,
        ticker: "MCAP",
        totalShares: 1, // Just 1 share
      });
      
      const company = await t.run(async (ctx) => {
        return await ctx.db.get(companyId);
      });
      
      const stock = await t.query(api.stocks.getCompanyStockInfo, {
        companyId,
      });
      
      if (company && stock) {
        // Market cap should be 5x balance, price per share would be very high
        const expectedMarketCap = company.balance * 5;
        const sharePrice = stock.price;
        
        console.log(`ℹ️  IPO with 1 share: Market Cap: ${expectedMarketCap}, Price/Share: ${sharePrice}`);
        
        if (sharePrice > 1000000000) { // More than $10M per share
          console.warn("⚠️  WARNING: Extremely high share price possible with low share count");
        }
      }
    } catch (error) {
      // May fail
    }
  });
  
  test("EXPLOIT: IPO price calculation overflow", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-ipo-overflow",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 100000000,
        netWorth: 100000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const companyId = await t.run(async (ctx) => {
      return await ctx.db.insert("companies", {
        ownerId: playerId,
        name: "Overflow IPO Co",
        balance: Number.MAX_SAFE_INTEGER / 10, // Very large balance
        isPublic: false,
        reputationScore: 0.5,
        flaggedStatus: false,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    try {
      await t.mutation(api.companies.makeCompanyPublic, {
        companyId,
        ticker: "OVFL",
        totalShares: 1, // Would cause overflow
      });
      
      const stock = await t.query(api.stocks.getCompanyStockInfo, {
        companyId,
      });
      
      if (stock && !Number.isSafeInteger(stock.price)) {
        console.error("⚠️  EXPLOIT DETECTED: Stock price calculation overflow");
        expect.fail("Price overflow");
      }
    } catch (error) {
      // Expected to fail
    }
  });
  
  test("EXPLOIT: Going public multiple times", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-double-ipo",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 100000000,
        netWorth: 100000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const companyId = await t.run(async (ctx) => {
      return await ctx.db.insert("companies", {
        ownerId: playerId,
        name: "Double IPO Co",
        balance: 10000000,
        isPublic: false,
        reputationScore: 0.5,
        flaggedStatus: false,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // First IPO
    await t.mutation(api.companies.makeCompanyPublic, {
      companyId,
      ticker: "DIPO",
      totalShares: 10000,
    });
    
    // Try second IPO
    try {
      await t.mutation(api.companies.makeCompanyPublic, {
        companyId,
        ticker: "DIPO2",
        totalShares: 10000,
      });
      
      // Check if multiple stock entries exist
      const stocks = await t.run(async (ctx) => {
        return await ctx.db
          .query("stocks")
          .withIndex("by_companyId", (q) => q.eq("companyId", companyId))
          .collect();
      });
      
      if (stocks.length > 1) {
        console.error("⚠️  EXPLOIT DETECTED: Company went public multiple times");
        expect.fail("Double IPO exploit");
      }
    } catch (error: any) {
      expect(error.message).toContain("already public");
    }
  });
});

// ============================================================================
// SECTION 14: BOUNDARY CONDITIONS & EDGE CASES
// ============================================================================

describe("Boundary Conditions & Edge Cases", () => {
  
  test("EXPLOIT: Maximum value boundary", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-max-value",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: Number.MAX_SAFE_INTEGER,
        netWorth: Number.MAX_SAFE_INTEGER,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const player = await t.run(async (ctx) => {
      return await ctx.db.get(playerId);
    });
    
    if (player && !Number.isSafeInteger(player.balance)) {
      console.error("⚠️  EXPLOIT DETECTED: Unsafe integer value stored");
      expect.fail("Boundary value violated");
    }
  });
  
  test("EXPLOIT: Minimum value boundary", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-min-value",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 0, // Minimum valid balance
        netWorth: 0,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Try operations with zero balance
    const player = await t.run(async (ctx) => {
      return await ctx.db.get(playerId);
    });
    
    expect(player?.balance).toBe(0);
  });
  
  test("EXPLOIT: Division by zero in calculations", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-divide-zero",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 10000000,
        netWorth: 10000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const companyId = await t.run(async (ctx) => {
      return await ctx.db.insert("companies", {
        ownerId: playerId,
        name: "Zero Shares Co",
        ticker: "ZERO",
        balance: 10000000,
        isPublic: true,
        marketCap: 0, // Zero market cap
        sharesOutstanding: 0, // Zero shares
        reputationScore: 0.5,
        flaggedStatus: false,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    const stockId = await t.run(async (ctx) => {
      return await ctx.db.insert("stocks", {
        companyId,
        ticker: "ZERO",
        price: 1000,
        totalShares: 0, // Zero shares
        marketCap: 0,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Try to buy shares (should fail)
    try {
      await t.mutation(api.stocks.buyStock, {
        userId: playerId,
        stockId,
        shares: 1,
        accountType: "player",
        accountId: playerId,
      });
      
      // Check if any divide-by-zero occurred
      const stock = await t.run(async (ctx) => {
        return await ctx.db.get(stockId);
      });
      
      if (stock && !Number.isFinite(stock.price)) {
        console.error("⚠️  EXPLOIT DETECTED: Division by zero resulted in invalid price");
        expect.fail("Division by zero not handled");
      }
    } catch (error) {
      // Expected to fail
    }
  });
  
  test("EXPLOIT: Floating point precision issues", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-float-precision",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 10000000,
        netWorth: 10000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Perform many small transactions
    let expectedBalance = 10000000;
    for (let i = 0; i < 100; i++) {
      await t.run(async (ctx) => {
        const player = await ctx.db.get(playerId);
        if (player) {
          // Add 1 cent
          await ctx.db.patch(playerId, {
            balance: player.balance + 1,
          });
        }
      });
      expectedBalance += 1;
    }
    
    const player = await t.run(async (ctx) => {
      return await ctx.db.get(playerId);
    });
    
    if (player && Math.abs(player.balance - expectedBalance) > 0.01) {
      console.warn(`⚠️  WARNING: Floating point precision loss. Expected: ${expectedBalance}, Got: ${player.balance}`);
    }
  });
  
  test("EXPLOIT: Empty string and null value handling", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-empty-values",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 10000000,
        netWorth: 10000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Try to create company with empty name
    try {
      await t.mutation(api.companies.createCompany, {
        ownerId: playerId,
        name: "", // Empty name
      });
      
      const companies = await t.query(api.companies.getPlayerCompanies, {
        playerId,
      });
      
      const emptyNameCompanies = companies.filter(c => c.name === "");
      if (emptyNameCompanies.length > 0) {
        console.warn("⚠️  WARNING: Empty company name accepted");
      }
    } catch (error) {
      // May be blocked
    }
  });
  
  test("EXPLOIT: Unicode and special character injection", async () => {
    const t = convexTest(schema);
    
    const playerId = await t.run(async (ctx) => {
      const userId = await ctx.db.insert("users", {
        tokenIdentifier: "test-unicode",
      });
      
      return await ctx.db.insert("players", {
        userId,
        balance: 10000000,
        netWorth: 10000000,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    });
    
    // Try special characters in names
    const specialNames = [
      "Company™®©",
      "Company\n\t\r",
      "Company<script>",
      "Company' OR '1'='1",
      "Company💰💸",
      "A".repeat(10000), // Very long name
    ];
    
    for (const name of specialNames) {
      try {
        await t.mutation(api.companies.createCompany, {
          ownerId: playerId,
          name,
        });
      } catch (error) {
        // May fail, which is acceptable
      }
    }
    
    const companies = await t.query(api.companies.getPlayerCompanies, {
      playerId,
    });
    
    for (const company of companies) {
      if (company.name.includes("<script>") || company.name.includes("OR '1'='1")) {
        console.error("⚠️  SECURITY: Injection patterns found in company name");
      }
      if (company.name.length > 1000) {
        console.warn("⚠️  WARNING: Excessively long name accepted");
      }
    }
  });
});

// ============================================================================
// FINAL SUMMARY
// ============================================================================

describe("Complete Exploit Detection Report", () => {
  test("Generate comprehensive report", () => {
    console.log("\n" + "=".repeat(80));
    console.log("COMPREHENSIVE EXPLOIT DETECTION TEST SUITE - FINAL REPORT");
    console.log("=".repeat(80));
    console.log("\n✅ Test Coverage:");
    console.log("\n   Part 1 - exploit.test.ts:");
    console.log("   • Balance & Currency Exploits (5 tests)");
    console.log("   • Stock Market Exploits (6 tests)");
    console.log("   • Cryptocurrency Exploits (5 tests)");
    console.log("\n   Part 2 - exploit-part2.test.ts:");
    console.log("   • Loan Exploits (6 tests)");
    console.log("   • Company & Product Exploits (6 tests)");
    console.log("   • Marketplace & Cart Exploits (5 tests)");
    console.log("\n   Part 3 - exploit-part3.test.ts:");
    console.log("   • Gambling Exploits (5 tests)");
    console.log("   • Upgrade Exploits (4 tests)");
    console.log("   • Transaction & Transfer Exploits (5 tests)");
    console.log("   • Timing & Tick Exploits (5 tests)");
    console.log("\n   Part 4 - exploit-part4.test.ts:");
    console.log("   • Net Worth & Portfolio Exploits (3 tests)");
    console.log("   • Leaderboard Manipulation (2 tests)");
    console.log("   • IPO & Market Cap Exploits (3 tests)");
    console.log("   • Boundary Conditions & Edge Cases (6 tests)");
    console.log("\n📊 Total: 66 exploit detection tests");
    console.log("\n🎯 Key Vulnerabilities Checked:");
    console.log("   ✓ Integer overflow/underflow");
    console.log("   ✓ Negative value exploits");
    console.log("   ✓ Race conditions");
    console.log("   ✓ Duplication exploits");
    console.log("   ✓ Price manipulation");
    console.log("   ✓ Supply violations");
    console.log("   ✓ Authorization bypasses");
    console.log("   ✓ Timestamp manipulation");
    console.log("   ✓ Division by zero");
    console.log("   ✓ Boundary value violations");
    console.log("   ✓ Injection attacks");
    console.log("   ✓ Balance inconsistencies");
    console.log("   ✓ Market manipulation");
    console.log("   ✓ Transaction integrity");
    console.log("   ✓ State corruption");
    console.log("\n⚠️  Important Notes:");
    console.log("   • Some tests require authentication mocking");
    console.log("   • Run tests in isolated environment");
    console.log("   • Review logs for warnings even if tests pass");
    console.log("   • Manual verification needed for some edge cases");
    console.log("   • Add new tests as game mechanics evolve");
    console.log("\n🔒 Recommendations:");
    console.log("   1. Run these tests before every deployment");
    console.log("   2. Set up CI/CD to auto-run exploit detection");
    console.log("   3. Monitor production logs for suspicious patterns");
    console.log("   4. Implement rate limiting on sensitive operations");
    console.log("   5. Add transaction amount limits");
    console.log("   6. Use database transactions for atomic operations");
    console.log("   7. Validate all inputs at API boundaries");
    console.log("   8. Log all high-value transactions");
    console.log("   9. Implement anomaly detection");
    console.log("   10. Regular security audits");
    console.log("\n" + "=".repeat(80));
    console.log("Game security testing complete. Review all warnings above!");
    console.log("=".repeat(80) + "\n");
  });
});
